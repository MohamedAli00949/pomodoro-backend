{"version":3,"file":"static/js/415.ed8b3112.chunk.js","mappings":"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","sources":["components/Tasks/Tasks.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect, useState } from \"react\";\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\nimport { CgClose } from \"react-icons/cg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTasks } from \"../../actions/tasks\";\r\nimport Loading from \"../../utils/Loading\";\r\nimport Message from \"../../utils/Message\";\r\nimport NetworkError from \"../NetworkError/NetworkError\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TaskForm = lazy(() => import(\"./TaskForm/TaskForm\"));\r\nconst Footer = lazy(() => import(\"./TaskFooter/TaskFooter\"));\r\nconst Menu = lazy(() => import(\"./TasksMenu/TasksMenu\"));\r\nconst Task = lazy(() => import(\"./Task/Task\"));\r\n\r\nconst Tasks = ({ message, setMessage, isLoading, setIsLoading, setOpenTodo }) => {\r\n  const [openFormForNew, setOpenFormForNew] = useState(false);\r\n  const tasks = useSelector(state => state.tasks);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n  const [page, setPage] = useState(1);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (tasks.tasks === undefined && tasks?.total === undefined) {\r\n      dispatch(getTasks(setMessage, 1));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks]);\r\n\r\n  useEffect(() => {\r\n    console.log(page);\r\n    if (page > tasks.currentPage) {\r\n      dispatch(getTasks(setMessage, Number(localStorage.getItem('currentPage')) + 1));\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      let scrollTop = document.querySelector('.tasks-container')?.scrollTop;\r\n      let scrollHeight = document.querySelector('.tasks-list')?.scrollHeight;\r\n      let clientHeight = document.querySelector('.tasks-container')?.clientHeight;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight && Number(localStorage.getItem('total')) > Number(localStorage.getItem('tasksLen'))) {\r\n        setPage(Number(localStorage.getItem('currentPage')) + 1);\r\n      }\r\n    }\r\n\r\n    // console.log(tasks.tasks);\r\n\r\n    document.querySelector('.tasks-container')?.addEventListener('scroll', onScroll);\r\n    return () => document.querySelector('.tasks-container')?.removeEventListener('scroll', onScroll);\r\n\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks, tasks.total])\r\n\r\n  if (tasks.tasks === undefined) {\r\n    console.log(message);\r\n    return (\r\n      <>\r\n        {(!message.message) ?\r\n          (\r\n            <>\r\n              <Loading\r\n                size=\"200\"\r\n                strokeWidth=\"2\"\r\n                backgroud=\"white\"\r\n                color={activites[active]?.color}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              {(message.message && !message.message.includes('Network Error')) ? (\r\n                <Message {...message} setMessage={setMessage} />\r\n              ) : (\r\n                <NetworkError />\r\n              )}\r\n            </>\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={\r\n        <Loading\r\n          size=\"200\"\r\n          strokeWidth=\"5\"\r\n          color=\"white\"\r\n          backgroud=\"transparent\"\r\n        />\r\n      }>\r\n        <div className=\"tasks glass-effect zoom-in\">\r\n          <div className=\"close-button-container\">\r\n          </div>\r\n          <div className=\"header\">\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              flexWrap: 'nowrap',\r\n              flexDirection: 'row',\r\n            }}>\r\n              <div className=\"header-buttons\">\r\n                <Menu setMessage={setMessage} />\r\n              </div>\r\n              <h2 style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                marginLeft: \"10px\",\r\n              }}>\r\n                Tasks\r\n              </h2>\r\n            </div>\r\n            <button aria-label='close tasks' className=\"close-tasks\" type='button' onClick={() => setOpenTodo(false)}>\r\n              <CgClose />\r\n            </button>\r\n          </div>\r\n          <div className=\"tasks-container\">\r\n            {tasks.tasks?.length > 0 && (\r\n              <div className=\"tasks-list\">\r\n                {isLoading === 'new' ? (\r\n                  <>\r\n                    {tasks.tasks?.filter(t => !t.check)?.map((task, index) => (\r\n                      <Suspense fallback={\r\n                        <div className=\"loading-container\">\r\n                          <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                        </div>\r\n                      } key={task._id}>\r\n                        <Task key={task._id} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} {...task} />\r\n                      </Suspense>\r\n                    ))}\r\n                    {\r\n                      <div className=\"loading-container\">\r\n                        <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                      </div>\r\n                    }\r\n                    {tasks.tasks?.filter(t => t.check)?.map((task, index) => (\r\n                      <Suspense fallback={\r\n                        <div className=\"loading-container\">\r\n                          <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                        </div>\r\n                      } key={task._id}>\r\n                        <Task key={task._id} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} {...task} />\r\n                      </Suspense>\r\n                    ))}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {tasks.tasks?.map((task, index) => (\r\n                      <Suspense fallback={\r\n                        <div className=\"loading-container\">\r\n                          <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                        </div>\r\n                      } key={task?._id}>\r\n                        <Task key={task?._id} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} {...task} />\r\n                      </Suspense>\r\n                    ))}\r\n                  </>\r\n                )}\r\n              </div>\r\n            )}\r\n            <> {/* This is for loading while bringing the tasks */}\r\n              {(tasks.isLoading && tasks.tasks.length > 0) && (\r\n                <div className=\"loading-container\">\r\n                  <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                </div>\r\n              )}\r\n            </>\r\n            {!openFormForNew ? (\r\n              <button aria-label=\"add task button\" className=\"add-task-button\" onClick={() => setOpenFormForNew(p => !p)}>\r\n                <AiOutlinePlus size=\"25px\" />\r\n                <p style={{ marginLeft: 10 }}>\r\n                  add task\r\n                </p>\r\n              </button>\r\n            ) : (\r\n              <Suspense fallback={\r\n                <div className=\"loading-container\">\r\n                  <Loading size=\"60\" strokeWidth=\"5\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                </div>\r\n              }>\r\n                <TaskForm setOpen={setOpenFormForNew} oldData={null} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} />\r\n              </Suspense>\r\n            )}\r\n          </div>\r\n          {tasks.tasks?.length > 0 && (\r\n            <div className=\"footer-container\">\r\n              <Footer />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Suspense>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Tasks;\r\n"],"names":["TaskForm","lazy","Footer","Menu","Task","message","setMessage","isLoading","setIsLoading","setOpenTodo","useState","openFormForNew","setOpenFormForNew","tasks","useSelector","state","timer","active","activites","page","setPage","dispatch","useDispatch","useEffect","undefined","total","getTasks","console","log","currentPage","Number","localStorage","getItem","onScroll","scrollTop","document","querySelector","scrollHeight","clientHeight","addEventListener","removeEventListener","includes","Message","NetworkError","Loading","size","strokeWidth","backgroud","color","Suspense","fallback","className","style","display","alignItems","justifyContent","flexWrap","flexDirection","marginLeft","type","onClick","length","filter","t","check","map","task","index","_id","setOpen","oldData","p"],"sourceRoot":""}