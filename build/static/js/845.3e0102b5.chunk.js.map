{"version":3,"file":"static/js/845.3e0102b5.chunk.js","mappings":"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","sources":["components/Clock/SmallWinBtn/SmallWinBtn.js","components/Clock/SettingOpen/SettingOpen.js","components/Clock/FullscreenBtn/FullscreenBtn.js","components/Clock/Timer.js","utils/helper.js"],"sourcesContent":["import React, {\r\n  useEffect,\r\n  // useEffect, \r\n  useState\r\n} from 'react';\r\n\r\nimport { RiExternalLinkLine } from \"react-icons/ri\";\r\nimport { CgInternal } from \"react-icons/cg\";\r\n\r\nfunction SmallWinBtn() {\r\n  const [minWin, setMinWin] = useState(localStorage.getItem('opened') === 'popup');\r\n\r\n  // useEffect(() => {\r\n  //   if ((window.opener === null || window?.opener?.closed) && window.name === 'popup') {\r\n  //     window.opener.postMessage(\"opened\", window.origin);\r\n  //     localStorage.removeItem(\"opened\");\r\n  //     console.log(window.opener)\r\n  //     window.open(window.location, \"_blank\");\r\n  //     window.close();\r\n  //   } else {\r\n  //     if (window.name !== 'popub') {\r\n  //       window.close();\r\n  //     }\r\n  //   }\r\n  //   // eslint-disble-next-line\r\n  // }, []);\r\n\r\n  const handleOpenExtInt = (event) => {\r\n    if ('open' in window) {\r\n      if (window.opener === null || window?.opener?.closed) {\r\n        window.open(\"/\", \"popup\", \"left=100,top=100,height=332,width=356\");\r\n      } /*else {\r\n        if (window.opener !== null) {\r\n          window.opener.postMessage(\"close\", window.origin);\r\n          if (window.name === 'popup') {\r\n            window.postMessage(\"close\", window.origin);\r\n            window.close();\r\n          }\r\n          else window.opener.close();\r\n          localStorage.removeItem(\"opened\");\r\n\r\n        }\r\n      }*/\r\n    }\r\n  }\r\n\r\n  window.onmessage = (event) => {\r\n    if (window.origin === event.origin) {\r\n      // if (window.name !== 'popup' && event.source.name === 'popup') {\r\n      if (event.data === 'opened') {\r\n        console.log(event.source.name);\r\n        console.log(event.data);\r\n        console.log(event.data);\r\n        setMinWin(true);\r\n      } else if (event.data === 'close') {\r\n        localStorage.removeItem(\"opened\")\r\n        setMinWin(false);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.onkeydown = (event) => {\r\n      if(event.code.toLowerCase() === 'keye') {\r\n        handleOpenExtInt();\r\n      }\r\n    }\r\n  })\r\n\r\n  if ('open' in window === false) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button aria-label='small external window' className='timer-button' type=\"button\" onClick={handleOpenExtInt}>\r\n        {(!minWin) ?\r\n          <RiExternalLinkLine />\r\n          : <>\r\n            <CgInternal />\r\n          </>\r\n        }\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SmallWinBtn;\r\n","import React from 'react';\r\nimport { AiOutlineSetting } from \"react-icons/ai\";\r\n\r\nfunction SettingOpen({ setOpenSetting }) {\r\n  return (\r\n    <button\r\n      aria-label='small external window'\r\n      className='timer-button setting-open'\r\n      type=\"button\"\r\n      onClick={() => setOpenSetting(true)}>\r\n      <AiOutlineSetting />\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SettingOpen;\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { RiFullscreenFill, RiFullscreenExitFill } from 'react-icons/ri';\r\n\r\nconst FullscreenBtn = () => {\r\n  const [full, setFull] = useState(false);\r\n\r\n  const handleFull = useCallback(() => {\r\n    setFull((f) => !f);\r\n\r\n    if (!full) {\r\n      document.documentElement.requestFullscreen();\r\n    } else { \r\n      document.exitFullscreen();\r\n    }\r\n  }, [full]);\r\n\r\n  useEffect(() => {\r\n    window.onkeydown = (event) => {\r\n      if(event.code.toLowerCase() === 'keyf') {\r\n        handleFull();\r\n      }\r\n    }\r\n  })\r\n\r\n  return (\r\n    <button aria-label='full screen' className='timer-button' type=\"button\" onClick={handleFull} style={{ left: '65px' }}>\r\n      {(!full) ?\r\n        <RiFullscreenFill />\r\n        : <>\r\n          <RiFullscreenExitFill />\r\n        </>\r\n      }\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FullscreenBtn;\r\n","import React, { lazy, Suspense, useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // 2\r\n\r\nimport { changeActive, PERIOD, START_TIMER, STOP_TIMER, CHANGE_ACTIVE } from \"../../actions/timer\";\r\n\r\nimport { pushNotification } from \"../../utils/helper\";\r\nimport audioPlayer from \"../../utils/audioPlayer\";\r\n\r\nimport Loading from \"../../utils/Loading\";\r\n\r\nimport \"./style.css\";\r\nimport SmallWinBtn from \"./SmallWinBtn/SmallWinBtn\";\r\nimport SettingOpen from \"./SettingOpen/SettingOpen\";\r\nimport FullscreenBtn from \"./FullscreenBtn/FullscreenBtn\";\r\n\r\nconst AnalogTimer = lazy(() => import(\"./Analog/Analog\"));\r\nconst DigitalTimer = lazy(() => import(\"./Digital/Digital\"));\r\n\r\nconst worker = new window.Worker('worker.js');\r\nconst Timer = ({ setIsLoadingTask, setMessage, setOpenSetting }) => {\r\n    const { active, activites, setting, started, periodNum } = useSelector((state) => state.timer);\r\n    const { activeId } = useSelector(state => state.tasks);\r\n    const [time, setTime] = useState(localStorage.getItem(\"restOfTime\") === null ? 0 : Number(localStorage.getItem(\"restOfTime\")))\r\n\r\n    const activePeriod = setting?.time[active];\r\n    const dispatch = useDispatch();\r\n\r\n    /** All sounds that we use it in timer.*/\r\n    const tickingSound = useRef(setting?.tickingType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.tickingType?.src,\r\n            volume: setting?.tickingVolume,\r\n            loop: true\r\n        }) :\r\n        null\r\n    );\r\n\r\n    const alarmSound = useRef(\r\n        audioPlayer({\r\n            src: setting?.alarmType?.src,\r\n            volume: setting?.alarmVolume,\r\n            loop: setting.alarmRepet > 0 ? true : false\r\n        })\r\n    );\r\n\r\n    const clickSound = useRef(setting?.clickType?.name !== \"none\" ?\r\n        audioPlayer({\r\n            src: setting?.clickType?.src,\r\n            volume: setting?.clickVolume\r\n        }) : null\r\n    );\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        if (\"Notification\" in window) {\r\n            if (window?.Notification?.permission === 'default') {\r\n                window?.Notification?.requestPermission();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.body.style.backgroundColor = activites[active].color;\r\n\r\n        if (setting.time !== undefined) {\r\n            if (setting?.time[active] - Number(localStorage.getItem('restOfTime')) > 1) {\r\n                setTime(setting?.time[active] - Number(localStorage.getItem(\"restOfTime\")));\r\n            } else {\r\n                dispatch(changeActive(active, activeId, setIsLoadingTask, setMessage));\r\n                localStorage.setItem('restOfTime', 0);\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.time]);\r\n\r\n    // For sounds of timer\r\n    useEffect(() => {\r\n        if (setting?.tickingType.name !== 'none') {\r\n            tickingSound.current.chengeVolume(setting?.tickingVolume);\r\n            tickingSound.current.changeFile(setting?.tickingType.src);\r\n        }\r\n\r\n        alarmSound.current.chengeVolume(setting?.alarmVolume);\r\n        alarmSound.current.changeFile(setting?.alarmType.src);\r\n        alarmSound.current.changeLoop(setting?.alarmRepet);\r\n\r\n        if (setting.clickType.name !== 'none') {\r\n            clickSound.current.chengeVolume(setting.clickVolume);\r\n            clickSound.current.changeFile(setting.clickType.src);\r\n        }\r\n    }, [setting]);\r\n\r\n    // If the option of auto pomodors or auto breaks is active, wait for 5 seconds and then start the next time.\r\n    useEffect(() => {\r\n        if (((active === PERIOD && setting.autoPomodors) || (active !== PERIOD && setting.autoBreaks)) && periodNum !== 0 && started) {\r\n            setTimeout(() => {\r\n                alarmSound.current.handleStop();\r\n                if (setting.tickingType.name !== \"none\") {\r\n                    tickingSound.current.handlePlay();\r\n                }\r\n                worker.postMessage({ started: !started, count: setting.time[active] });\r\n                dispatch({ type: START_TIMER, data: 0 });\r\n                console.log(time, 0, \"autoBreaks autoPomodors\");\r\n            }, 5000);\r\n            console.log(active);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [active, setting.autoBreaks, setting.autoPomodors]);\r\n\r\n    // This hook will be executed after the timer has been started working through makeing the focus mode if it active.\r\n    useEffect(() => {\r\n        if (started) {\r\n            document.body.onbeforeunload = () => {\r\n                return () => {\r\n                    return \"Hello, world!\"\r\n                }\r\n            }\r\n\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = \"rgb(30 30 30)\";\r\n                document.body.style.overflow = \"hidden\";\r\n            }\r\n        } else {\r\n            document.body.onbeforeunload = null;\r\n            if (setting.focusMode) {\r\n                document.body.style.backgroundColor = activites[active].color;\r\n                document.body.style.overflow = \"auto\";\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [started]);\r\n\r\n    worker.onmessage = (event) => {\r\n        if (event.data !== 'stop') {\r\n            setTime(event.data);\r\n            // eslint-disable-next-line\r\n            if (\"Notification\" in window) {\r\n                if (window?.Notification?.permission === 'granted') {\r\n                    if (time !== 0) {\r\n                        if (setting.notificationType === 'every') {\r\n                            if (time % (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        } else {\r\n                            if (time - (setting.notificationInterval * 60) === 0 && time !== activePeriod) {\r\n                                pushNotification(`${time / 60} minutes left!`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            console.log(event.data, time, 0, \"worker stop\");\r\n\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n            alarmSound.current.handlePlay();\r\n\r\n            if (((active !== PERIOD && !setting.autoPomodors) || (active === PERIOD && !setting.autoBreaks))) {\r\n                dispatch({ type: STOP_TIMER, data: 0 });\r\n            }\r\n\r\n            if (setting.alarmRepet > 0) {\r\n                alarmSound.current.changeLoop(true);\r\n                setTimeout(() => {\r\n                    alarmSound.current.handleStop();\r\n                }, setting.alarmRepet * 1000);\r\n                console.log(\"alarm repet\")\r\n            }\r\n\r\n            dispatch(changeActive(active, activeId, setIsLoadingTask, setMessage));\r\n\r\n            // eslint-disable-next-line\r\n            if (\"Notification\" in window) {\r\n                if (window?.Notification.permission === 'granted') {\r\n                    if (active === PERIOD) {\r\n                        pushNotification(\"It's time to take a break\");\r\n                    } else {\r\n                        pushNotification(\"It's time to focus!\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const handleKeys = (event) => {\r\n            const inputsItems = ['input', 'textarea']\r\n            const activeElement = document.activeElement.tagName.toLowerCase();\r\n            if (!inputsItems.includes(activeElement)) {\r\n                if (event.code.toLowerCase() === 'space') {\r\n                    toggleStart();\r\n                }\r\n\r\n                if (event.code.toLowerCase() === 'arrowright' && !started) {\r\n                    handleSkip();\r\n                }\r\n\r\n                if (event.code.toLowerCase() === 'keyc' && !started) {\r\n                    handleReset();\r\n                }\r\n            }\r\n        };\r\n\r\n        window.onkeydown = handleKeys;\r\n    })\r\n\r\n    const toggleStart = useCallback(() => {\r\n        console.log(\"toggle start\")\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        alarmSound.current.handleStop();\r\n\r\n        if (started) {\r\n            worker.postMessage(\"stop\");\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handleStop();\r\n            }\r\n            dispatch({ type: STOP_TIMER, data: setting.time[active] - time });\r\n        } else {\r\n            if (setting.tickingType.name !== \"none\") {\r\n                tickingSound.current.handlePlay();\r\n            }\r\n            if (!started) {\r\n                worker.postMessage({ started: !started, count: time });\r\n            }\r\n            dispatch({ type: START_TIMER, data: 0 });\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [started, time]);\r\n\r\n    const handleReset = () => {\r\n        setTime(activePeriod);\r\n        if (setting.clickType.name !== \"none\") {\r\n            clickSound.current.handlePlay();\r\n        }\r\n        localStorage.setItem(\"restOfTime\", 0)\r\n    }\r\n\r\n    const handleSkip = () => {\r\n        dispatch({ type: CHANGE_ACTIVE });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"clock-container\" style={{ background: activites[active].timerBorder }}>\r\n                {!started && (\r\n                    <>\r\n                        <SmallWinBtn />\r\n                        <SettingOpen setOpenSetting={setOpenSetting} />\r\n                        <FullscreenBtn />\r\n                    </>\r\n                )}\r\n                <div className=\"clock\">\r\n                    <Suspense fallback={<Loading color={activites[active].color} backgroud=\"transparent\" size=\"200\" strokeWidth=\"2.5\" />}>\r\n                        {setting.format === \"digital\" ? (\r\n                            <>\r\n                                <DigitalTimer\r\n                                    handleReset={handleReset}\r\n                                    toggleStart={toggleStart}\r\n                                    setTime={setTime}\r\n                                    time={time}\r\n                                    handleSkip={handleSkip}\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <AnalogTimer\r\n                                    handleReset={handleReset}\r\n                                    toggleStart={toggleStart}\r\n                                    setTime={setTime}\r\n                                    time={time}\r\n                                    handleSkip={handleSkip}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Timer;\r\n","export const formatTime = (t) => {\r\n  const sec = t % 60;\r\n  const min = Math.floor(t / 60);\r\n  // console.log(min, sec);\r\n  return `${min >= 10 ? min : '0' + min}:${sec >= 10 ? sec : '0' + sec}`\r\n};\r\n\r\nexport const updatedAt = (t) => {\r\n  const now = new Date(Date.now());\r\n  const date = new Date(t);\r\n  const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n\r\n  if (now.getFullYear() === date.getFullYear()) {\r\n    if (now.getMonth() === date.getMonth()) {\r\n      if (now.getDate() === date.getDate()) {\r\n        if (now.getHours() === date.getHours()) {\r\n          if (now.getMinutes() === date.getMinutes()) {\r\n            return `Updated now`\r\n          } else {\r\n            return `Updated ${now.getMinutes() - date.getMinutes()} Min ago`;\r\n          }\r\n        } else {\r\n          return `Updated ${now.getHours() - date.getHours()} Hours ago`;\r\n        }\r\n      } else {\r\n        return `Updated ${now.getDate() - date.getDate()} Days ago`;\r\n      }\r\n    } else {\r\n      return `Updated ${date.toLocaleDateString('en', options).split(',')[0]} ago`;\r\n    }\r\n  } else {\r\n    return `Updated ${date.toLocaleDateString('en', options)} ago`;\r\n  }\r\n}\r\n\r\nexport const pushNotification = (message) => {\r\n  // eslint-disable-next-line\r\n  if (typeof window?.Notification !== undefined) {\r\n    new window.Notification(message, {\r\n      icon: 'favicon.ico',\r\n      tag: \"mohamed ali\",\r\n      requireInteraction: true,\r\n      renotify: true\r\n    });\r\n  }\r\n};\r\n"],"names":["useState","localStorage","getItem","minWin","setMinWin","handleOpenExtInt","event","window","opener","closed","open","onmessage","origin","data","console","log","source","name","removeItem","useEffect","onkeydown","code","toLowerCase","className","type","onClick","setOpenSetting","full","setFull","handleFull","useCallback","f","document","exitFullscreen","documentElement","requestFullscreen","style","left","AnalogTimer","lazy","DigitalTimer","worker","Worker","setIsLoadingTask","setMessage","useSelector","state","timer","active","activites","setting","started","periodNum","activeId","tasks","Number","time","setTime","activePeriod","dispatch","useDispatch","tickingSound","useRef","tickingType","audioPlayer","src","volume","tickingVolume","loop","alarmSound","alarmType","alarmVolume","alarmRepet","clickSound","clickType","clickVolume","Notification","permission","requestPermission","body","backgroundColor","color","undefined","changeActive","setItem","current","chengeVolume","changeFile","changeLoop","PERIOD","autoPomodors","autoBreaks","setTimeout","handleStop","handlePlay","postMessage","count","START_TIMER","onbeforeunload","focusMode","overflow","notificationType","notificationInterval","pushNotification","STOP_TIMER","activeElement","tagName","includes","toggleStart","handleSkip","handleReset","CHANGE_ACTIVE","background","timerBorder","Suspense","fallback","Loading","backgroud","size","strokeWidth","format","formatTime","t","sec","min","Math","floor","updatedAt","now","Date","date","options","year","month","day","getFullYear","getMonth","getDate","getHours","getMinutes","toLocaleDateString","split","message","icon","tag","requireInteraction","renotify"],"sourceRoot":""}