{"version":3,"file":"static/js/778.cebf67aa.chunk.js","mappings":"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","sources":["components/Templates/TemplateTasks/TemplateTasks.js"],"sourcesContent":["import React, { lazy, useState, useEffect } from 'react';\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\n\r\nimport Loading from \"../../../utils/Loading\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTasksForTemplate } from '../../../actions/templates';\r\n\r\nimport './style.css'\r\nimport TemplateTasksHeader from './TemplateTasksHeader';\r\n\r\nconst Task = lazy(() => import('../../Tasks/Task/Task'));\r\nconst TaskForm = lazy(() => import('../../Tasks/TaskForm/TaskForm'));\r\n\r\nfunction TemplateTasks({ templateId, setOpenTodo, message, setMessage }) {\r\n  const dispatch = useDispatch();\r\n  const [openFormForNew, setOpenFormForNew] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(\"\");\r\n  const tasks = useSelector(state => state.templates.tempTasks[templateId]) || {};\r\n  const template = useSelector(state => state.templates.userTemplates.templates.find(t => t._id === templateId));\r\n  const [page, setPage] = useState(1);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n\r\n  useEffect(() => {\r\n    if (templateId && tasks.tasks === undefined && template.tasks?.length > 0 && template.tasks.every(t => typeof t === 'string')) {\r\n      dispatch(getTasksForTemplate(templateId, 1, setMessage, setIsLoading));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks]);\r\n\r\n  useEffect(() => {\r\n    if (page > tasks?.currentPage) {\r\n      dispatch(getTasksForTemplate(templateId, 1, setMessage, setIsLoading));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      let scrollTop = document.querySelector('.tasks-container')?.scrollTop;\r\n      let scrollHeight = document.querySelector('.tasks-list')?.scrollHeight;\r\n      let clientHeight = document.querySelector('.tasks-container')?.clientHeight;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight && Number(localStorage.getItem(`${templateId}-total`)) > Number(localStorage.getItem(`${templateId}-tasksLen`))) {\r\n        setPage(Number(localStorage.getItem(`${templateId}-currentPage`)) + 1);\r\n      }\r\n    }\r\n\r\n    document.querySelector('.tasks-container')?.addEventListener('scroll', onScroll);\r\n    return () => document.querySelector('.tasks-container')?.removeEventListener('scroll', onScroll);\r\n\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks, tasks.total])\r\n\r\n  return (\r\n    <>\r\n      {(template.tasks?.length > 0\r\n        && template.tasks.every(t => typeof t === 'string')\r\n        && tasks.tasks === undefined) ? (\r\n        <Loading\r\n          size=\"100\"\r\n          strokeWidth=\"4\"\r\n          backgroud=\"white\"\r\n          color={activites[active]?.color}\r\n        />\r\n      ) : (\r\n        <div className=\"tasks-container\">\r\n          {tasks.tasks?.length > 0 && (\r\n            <div className=\"tasks-list\">\r\n              {tasks.tasks?.map((task) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  template={templateId ? { \"_id\": templateId, todo: false } : 'new'}\r\n                  {...task}\r\n                />\r\n              ))}\r\n              {isLoading === 'new' && (\r\n                <>\r\n                  {\r\n                    <div className=\"loading-container\">\r\n                      <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                    </div>\r\n                  }\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n          {/* This is for loading while bringing the tasks */}\r\n          {(isLoading === 'tasks' && tasks.tasks?.length > 0) && (\r\n            <div className=\"loading-container\">\r\n              <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n            </div>\r\n          )}\r\n          {!openFormForNew ? (\r\n            <button aria-label=\"add task button\" className=\"add-task-button\" onClick={() => setOpenFormForNew(p => !p)}>\r\n              <AiOutlinePlus size=\"25px\" />\r\n              <p style={{ marginLeft: 10 }}>\r\n                add task\r\n              </p>\r\n            </button>\r\n          ) : (\r\n            <TaskForm\r\n              setOpen={setOpenFormForNew}\r\n              oldData={null}\r\n              template={templateId ? { \"_id\": templateId, todo: false } : 'new'}\r\n              isLoading={isLoading}\r\n              setIsLoading={setIsLoading}\r\n              setMessage={setMessage}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TemplateTasks;\r\n"],"names":["Task","lazy","TaskForm","templateId","setMessage","setOpenTodo","message","dispatch","useDispatch","useState","openFormForNew","setOpenFormForNew","isLoading","setIsLoading","tasks","useSelector","state","templates","tempTasks","template","userTemplates","find","t","_id","page","setPage","timer","active","activites","useEffect","undefined","length","every","getTasksForTemplate","currentPage","onScroll","scrollTop","document","querySelector","scrollHeight","clientHeight","Number","localStorage","getItem","addEventListener","removeEventListener","total","Loading","size","strokeWidth","backgroud","color","className","map","task","todo","setOpen","oldData","onClick","p","style","marginLeft"],"sourceRoot":""}