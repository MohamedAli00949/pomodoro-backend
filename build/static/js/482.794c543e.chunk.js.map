{"version":3,"file":"static/js/482.794c543e.chunk.js","mappings":"8MAWMA,GAAcC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAqGzB,UAnGa,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACNC,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAV,IAA3BA,MACR,GAA8BC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAV,IAAvCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAChB,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBMC,EAAc,SAACC,GACnBN,GAAY,SAAAO,GAAE,OAAKA,CAAL,IACdH,EAASE,EACV,EAED,OACE,iCACE,SAAC,EAAAE,SAAD,CAAUC,UACR,SAAC,IAAD,CACEC,KAAK,MACLC,YAAY,IACZC,MAAOf,EAAUD,GAAQgB,MACzBC,UAAU,gBALd,SAQa,KAAVV,IACC,SAACd,EAAD,CACEiB,MACE,+BACE,0BAEc,aAAVH,EACE,qBACU,QAAVA,EACE,gBACA,gBAKZW,KACY,aAAVX,EA9CqB,WAC/BC,EAAS,IACTH,GAASc,EAAAA,EAAAA,IAAmBxB,GAC7B,EA6CuB,QAAVY,EA3CS,WACrBC,EAAS,IACTH,GAASe,EAAAA,EAAAA,IAASzB,GACnB,EAEwB,WACvBa,EAAS,IACTH,GAASgB,EAAAA,EAAAA,IAAc1B,GACxB,EAuCS2B,SACE,kBAAMd,EAAS,GAAf,OAKR,iBAAKe,UAAU,OAAf,WACE,mBACE,aAAW,4BACXA,UAAU,cACVC,QAAS,kBAAMpB,GAAY,SAAAO,GAAE,OAAKA,CAAL,GAApB,EACTc,SAA4B,KAAb,OAAL7B,QAAK,IAALA,OAAA,EAAAA,EAAO8B,QAJnB,UAKE,SAAC,MAAD,MAEDvB,IACC,gBAAKoB,UAAU,eAAf,UACE,iBAAKA,UAAU,MAAf,WACE,oBACE,aAAW,gCACXC,QAAS,kBAAMf,EAAY,MAAlB,EAA0BC,KAAK,SACxCe,SAAkD,IAAxC7B,EAAM+B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAM,CAAZ,IAAeH,OAHzC,WAIC,SAAC,MAAD,IAJD,KAIe,mDACf,oBACE,aAAW,4BACXF,QAAS,kBAAMf,EAAY,WAAlB,EAA+BC,KAAK,SAC7Ce,SAAgD,IAAtC7B,EAAM+B,QAAO,SAAAC,GAAC,OAAIA,EAAEE,KAAN,IAAaJ,OAHvC,WAIC,SAAC,MAAD,IAJD,KAIc,oDACd,oBACEhB,KAAK,SACL,aAAW,kBACXc,QAAS,kBAAMf,EAAY,MAAlB,EAHX,WAIC,SAAC,MAAD,IAJD,KAIc,wDAO3B,C","sources":["components/Tasks/TasksMenu/TasksMenu.js"],"sourcesContent":["import React, { lazy, Suspense, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { HiMenu } from \"react-icons/hi\";\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { BsCheckLg } from 'react-icons/bs';\r\nimport { clearFinishedTasks, clearAct, clearAllTasks } from \"../../../actions/tasks\";\r\n\r\nimport Loading from \"../../../utils/Loading\";\r\n\r\nconst DeletePopup = lazy(() => import(\"./../../../utils/DeletePopup/DeletePopup\"));\r\n\r\nconst Menu = ({ setMessage }) => {\r\n  const { tasks } = useSelector(state => state.tasks);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [clear, setClear] = useState(\"\");\r\n\r\n  const handleClearFinishedTasks = () => {\r\n    setClear('');\r\n    dispatch(clearFinishedTasks(setMessage));\r\n  }\r\n\r\n  const handleClearAct = () => {\r\n    setClear('');\r\n    dispatch(clearAct(setMessage));\r\n  }\r\n\r\n  const handleClearTasks = () => {\r\n    setClear('');\r\n    dispatch(clearAllTasks(setMessage));\r\n  }\r\n\r\n  const handleClear = (type) => {\r\n    setOpenMenu(om => !om);\r\n    setClear(type)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={\r\n        <Loading\r\n          size=\"100\"\r\n          strokeWidth=\"5\"\r\n          color={activites[active].color}\r\n          backgroud=\"transparent\"\r\n        />\r\n      }>\r\n        {clear !== \"\" && (\r\n          <DeletePopup\r\n            type={\r\n              <>\r\n                <span>\r\n                  {\r\n                    clear === 'finished' ?\r\n                      'all finished tasks' :\r\n                      clear === 'act' ?\r\n                        'act promodors' :\r\n                        'all tasks'\r\n                  }\r\n                </span>\r\n              </>\r\n            }\r\n            onOk={\r\n              clear === 'finished' ?\r\n                handleClearFinishedTasks :\r\n                clear === 'act' ?\r\n                  handleClearAct :\r\n                  handleClearTasks\r\n            }\r\n            onCancel={\r\n              () => setClear(\"\")\r\n            }\r\n          />\r\n        )}\r\n      </Suspense>\r\n      <div className=\"menu\">\r\n        <button\r\n          aria-label=\"toggle the task list menu\"\r\n          className=\"toggle-menu\"\r\n          onClick={() => setOpenMenu(om => !om)}\r\n          disabled={tasks?.length === 0}>\r\n          <HiMenu />\r\n        </button>\r\n        {openMenu && (\r\n          <div className=\"menu-content\">\r\n            <div className=\"row\">\r\n              <button\r\n                aria-label=\"clear all act pomodoros tasks\"\r\n                onClick={() => handleClear('act')} type='button'\r\n                disabled={tasks.filter(t => t.act > 0).length === 0}\r\n              ><BsCheckLg /> <p>clear act pomodoros</p></button>\r\n              <button\r\n                aria-label=\"delete all finished tasks\"\r\n                onClick={() => handleClear('finished')} type='button'\r\n                disabled={tasks.filter(t => t.check).length === 0}\r\n              ><MdDelete /> <p>clear finished tasks</p></button>\r\n              <button\r\n                type='button'\r\n                aria-label=\"clear all tasks\"\r\n                onClick={() => handleClear('all')}\r\n              ><MdDelete /> <p>clear all tasks</p></button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Menu;\r\n"],"names":["DeletePopup","lazy","setMessage","tasks","useSelector","state","timer","active","activites","useState","openMenu","setOpenMenu","dispatch","useDispatch","clear","setClear","handleClear","type","om","Suspense","fallback","size","strokeWidth","color","backgroud","onOk","clearFinishedTasks","clearAct","clearAllTasks","onCancel","className","onClick","disabled","length","filter","t","act","check"],"sourceRoot":""}