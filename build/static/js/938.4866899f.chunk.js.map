{"version":3,"file":"static/js/938.4866899f.chunk.js","mappings":"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","sources":["components/Tasks/TodoTemplate.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from 'react';\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\nimport { getTodoTasks } from '../../actions/tasks';\r\n\r\nimport Loading from '../../utils/Loading';\r\n\r\nimport Message from \"../../utils/Message\";\r\nimport NetworkError from \"../NetworkError/NetworkError\";\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst Task = lazy(() => import('./Task/Task'));\r\nconst TaskForm = lazy(() => import('./TaskForm/TaskForm'));\r\n\r\nconst Template = ({ todoTemplate, isLoading, setIsLoading, message, setMessage }) => {\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * I have used '|| {}' because after cleaning the task template from act i get the following error, \r\n   *    Cannot destructure property 'tasks' of '(intermediate value)(intermediate value)(intermediate value)' as it is undefined.\r\n   */\r\n  const { tasks, currentPage, total } = useSelector(state => state?.tasks).tempTasks[todoTemplate._id] || {};\r\n  const [openFormForNew, setOpenFormForNew] = useState(false);\r\n  const [loadingTasks, setLoadingTasks] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n\r\n  useEffect(() => {\r\n    if (tasks === undefined && total === undefined) {\r\n      dispatch(getTodoTasks(todoTemplate._id, 1, setLoadingTasks, setMessage));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [tasks])\r\n\r\n  useEffect(() => {\r\n    console.log(page);\r\n    if (page > currentPage) {\r\n      dispatch(getTodoTasks(todoTemplate._id, Number(localStorage.getItem(`${todoTemplate._id}-currentPage`)) + 1, setLoadingTasks, setMessage));\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      let scrollTop = document.querySelector('.tasks-container')?.scrollTop;\r\n      let scrollHeight = document.querySelector('.tasks-list')?.scrollHeight;\r\n      let clientHeight = document.querySelector('.tasks-container')?.clientHeight;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight && Number(localStorage.getItem(`${todoTemplate._id}-total`)) > Number(localStorage.getItem(`${todoTemplate._id}-tasksLen`))) {\r\n        setPage(Number(localStorage.getItem(`${todoTemplate._id}-currentPage`)) + 1);\r\n      }\r\n    }\r\n\r\n    document.querySelector('.tasks-container')?.addEventListener('scroll', onScroll);\r\n    return () => document.querySelector('.tasks-container')?.removeEventListener('scroll', onScroll);\r\n\r\n    // eslint-disable-next-line\r\n  }, [tasks, total])\r\n\r\n  if (tasks === undefined) {\r\n    console.log(message);\r\n    return (\r\n      <>\r\n        {(!message.message) ?\r\n          (\r\n            <>\r\n              <Loading\r\n                size=\"100\"\r\n                strokeWidth=\"2\"\r\n                backgroud=\"white\"\r\n                color={activites[active]?.color}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              {(message.message && !message.message.includes('Network Error')) ? (\r\n                <Message {...message} setMessage={setMessage} />\r\n              ) : (\r\n                <NetworkError />\r\n              )}\r\n            </>\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tasks?.length > 0 && (\r\n        <div className=\"tasks-list\">\r\n          {isLoading === 'new' ? (\r\n            <>\r\n              {tasks?.map((task, index) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  {...task}\r\n                />\r\n              ))}\r\n              {\r\n                <div className=\"loading-container\">\r\n                  <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                </div>\r\n              }\r\n            </>\r\n          ) : (\r\n            <>\r\n              {tasks?.map((task, index) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  {...task}\r\n                />\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n      <> {/* This is for loading while bringing the tasks */}\r\n        {(loadingTasks && tasks.length > 0) && (\r\n          <div className=\"loading-container\">\r\n            <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n          </div>\r\n        )}\r\n      </>\r\n      {!openFormForNew && (\r\n        <button aria-label=\"add task button\" className=\"add-task-button\" onClick={() => setOpenFormForNew(p => !p)}>\r\n          <AiOutlinePlus size=\"25px\" />\r\n          <p style={{ marginLeft: 10 }}>\r\n            add task\r\n          </p>\r\n        </button>\r\n      )}\r\n      {openFormForNew && (\r\n        <TaskForm setOpen={setOpenFormForNew} oldData={null} template={{ \"_id\": todoTemplate._id }} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Template;\r\n"],"names":["Task","lazy","TaskForm","todoTemplate","isLoading","setIsLoading","message","setMessage","dispatch","useDispatch","useSelector","state","tasks","tempTasks","_id","currentPage","total","useState","openFormForNew","setOpenFormForNew","loadingTasks","setLoadingTasks","page","setPage","timer","active","activites","useEffect","undefined","getTodoTasks","console","log","Number","localStorage","getItem","onScroll","scrollTop","document","querySelector","scrollHeight","clientHeight","addEventListener","removeEventListener","includes","size","strokeWidth","backgroud","color","length","className","map","task","index","onClick","p","style","marginLeft","setOpen","oldData","template"],"sourceRoot":""}