{"version":3,"file":"static/js/79.3505ed5e.chunk.js","mappings":"2MAUMA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,8DAAN,IACZC,GAAWD,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAsHtB,UApHA,YAA4D,IAAD,QA4CgD,EA5CtFE,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WACrCC,GAAWC,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,UAAhB,OAA0Bf,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAMgB,IAApC,KAA6C,CAAC,EAC7E,GAAwBV,EAAAA,EAAAA,UAAS,GAAjC,eAAOW,EAAP,KAAaC,EAAb,KACA,GAA8BN,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMM,KAAV,IAAvCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAsChB,OApCAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACN,OAAJtB,QAAI,IAAJA,GAAAA,EAAMgB,UAAuBO,IAAhBZ,EAAMA,QAAuB,UAAAX,EAAKW,aAAL,eAAYa,QAAS,GAAKxB,EAAKW,MAAMc,OAAM,SAAAC,GAAC,MAAiB,kBAANA,CAAX,IACxFtB,GAASuB,EAAAA,EAAAA,IAAmB,OAAC3B,QAAD,IAACA,OAAD,EAACA,EAAMgB,IAAK,EAAGb,EAAYO,IAEnDC,EAAMA,OACRV,GAAQ,kBAAKD,GAAN,IAAYW,MAAOA,EAAMA,SAGpCiB,QAAQC,IAAI7B,EAEb,GAAE,CAACW,EAAMA,SAEVW,EAAAA,EAAAA,YAAU,WACJL,GAAI,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAOmB,cAChB1B,GAASuB,EAAAA,EAAAA,IAAmB,OAAC3B,QAAD,IAACA,OAAD,EAACA,EAAMgB,IAAK,EAAGb,EAAYO,GAG1D,GAAE,CAACO,KAEJK,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRS,EAAW,WAAO,IAAD,MACjBC,EAAS,UAAGC,SAASC,cAAc,2BAA1B,aAAG,EAA4CF,UACxDG,EAAY,UAAGF,SAASC,cAAc,sBAA1B,aAAG,EAAuCC,aAGtDH,GAFY,UAAGC,SAASC,cAAc,2BAA1B,aAAG,EAA4CE,eAE/BD,GAAgBE,OAAOC,aAAaC,QAAb,UAAwBvC,EAAKgB,IAA7B,YAA6CqB,OAAOC,aAAaC,QAAb,UAAwBvC,EAAKgB,IAA7B,gBACzGE,EAAQmB,OAAOC,aAAaC,QAAb,UAAwBvC,EAAKgB,IAA7B,kBAAmD,EAErE,EAGD,OADA,UAAAiB,SAASC,cAAc,2BAAvB,SAA4CM,iBAAiB,SAAUT,GAChE,kCAAME,SAASC,cAAc,2BAA7B,aAAM,EAA4CO,oBAAoB,SAAUV,EAAhF,CAGR,GAAE,CAACpB,EAAMA,MAAOA,EAAM+B,SAEnB,UAAA1C,EAAKW,aAAL,eAAYa,QAAS,GAAKxB,EAAKW,MAAMc,OAAM,SAAAC,GAAC,MAAiB,kBAANA,CAAX,UAA8CH,IAAhBZ,EAAMA,OAClFiB,QAAQC,IAAI3B,IAEV,+BACE,SAAC,IAAD,CACEyC,KAAK,MACLC,YAAY,IACZC,UAAU,QACVC,MAAK,UAAEzB,EAAUD,UAAZ,aAAE,EAAmB0B,YAOhC,+BACE,gBAAKC,UAAU,YAAf,UACE,iBAAKA,UAAU,kBAAf,WACG,UAAA/C,EAAKW,aAAL,eAAYa,QAAS,IACpB,iBAAKuB,UAAU,aAAf,oBACG/C,EAAKW,aADR,aACG,EAAYqC,KAAI,SAACC,GAAD,OACf,SAACpD,GAAD,QAEEY,UAAWA,EACXC,aAAcA,EACdP,WAAYA,EACZ+C,SAAc,OAAJlD,QAAI,IAAJA,GAAAA,EAAMgB,IAAM,CAAE,WAAOhB,QAAP,IAAOA,OAAP,EAAOA,EAAMgB,IAAKmC,MAAM,GAAU,MAC1DC,gBAAqB,OAAJpD,QAAI,IAAJA,GAAAA,EAAMgB,IAAM,KAAOf,GAChCgD,GANCA,EAAKjC,IAFG,IAWF,QAAdP,IACC,+BAEI,gBAAKsC,UAAU,oBAAf,UACE,SAAC,IAAD,CAASJ,KAAK,KAAKC,YAAY,IAAIE,MAAO,OAAQD,UAAU,uBAQxD,UAAdpC,IAAyB,UAAAE,EAAMA,aAAN,eAAaa,QAAS,IAC/C,gBAAKuB,UAAU,oBAAf,UACE,SAAC,IAAD,CAASJ,KAAK,KAAKC,YAAY,IAAIE,MAAO,OAAQD,UAAU,kBAG9DtC,GAQA,SAACR,EAAD,CACEsD,QAAS7C,EACT8C,QAAS,KACTJ,SAAc,OAAJlD,QAAI,IAAJA,GAAAA,EAAMgB,IAAM,CAAE,WAAOhB,QAAP,IAAOA,OAAP,EAAOA,EAAMgB,IAAKmC,MAAM,GAAU,MAC1DC,gBAAqB,OAAJpD,QAAI,IAAJA,GAAAA,EAAMgB,IAAM,KAAOf,EACpCQ,UAAWA,EACXC,aAAcA,EACdP,WAAYA,KAdd,oBAAQ,aAAW,kBAAkB4C,UAAU,kBAAkBQ,QAAS,kBAAM/C,GAAkB,SAAAgD,GAAC,OAAKA,CAAL,GAAzB,EAA1E,WACE,SAAC,MAAD,CAAeb,KAAK,UACpB,cAAGc,MAAO,CAAEC,WAAY,IAAxB,+BAmBb,C","sources":["components/Templates/TemplateForm/TasksStep/TasksStep.js"],"sourcesContent":["import React, { lazy, useState, useEffect } from 'react';\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\n\r\nimport Loading from \"../../../../utils/Loading\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTasksForTemplate } from '../../../../actions/templates';\r\n\r\nimport '../../../Tasks/style.css'\r\n\r\nconst Task = lazy(() => import('../../../Tasks/Task/Task'));\r\nconst TaskForm = lazy(() => import('../../../Tasks/TaskForm/TaskForm'));\r\n\r\nfunction TasksStep({ data, setData, message, setMessage }) {\r\n  const dispatch = useDispatch();\r\n  const [openFormForNew, setOpenFormForNew] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(\"\");\r\n  const tasks = useSelector(state => state.templates.tempTasks[data?._id]) || {};\r\n  const [page, setPage] = useState(1);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n\r\n  useEffect(() => {\r\n    if (data?._id && tasks.tasks === undefined && data.tasks?.length > 0 && data.tasks.every(t => typeof t === 'string')) {\r\n      dispatch(getTasksForTemplate(data?._id, 1, setMessage, setIsLoading));\r\n    } else {\r\n      if (tasks.tasks) {\r\n        setData({ ...data, tasks: tasks.tasks })\r\n      }\r\n    }\r\n    console.log(data);\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks]);\r\n\r\n  useEffect(() => {\r\n    if (page > tasks?.currentPage) {\r\n      dispatch(getTasksForTemplate(data?._id, 1, setMessage, setIsLoading));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      let scrollTop = document.querySelector('.tasks-container')?.scrollTop;\r\n      let scrollHeight = document.querySelector('.tasks-list')?.scrollHeight;\r\n      let clientHeight = document.querySelector('.tasks-container')?.clientHeight;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight && Number(localStorage.getItem(`${data._id}-total`)) > Number(localStorage.getItem(`${data._id}-tasksLen`))) {\r\n        setPage(Number(localStorage.getItem(`${data._id}-currentPage`)) + 1);\r\n      }\r\n    }\r\n\r\n    document.querySelector('.tasks-container')?.addEventListener('scroll', onScroll);\r\n    return () => document.querySelector('.tasks-container')?.removeEventListener('scroll', onScroll);\r\n\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks, tasks.total])\r\n\r\n  if (data.tasks?.length > 0 && data.tasks.every(t => typeof t === 'string') && tasks.tasks === undefined) {\r\n    console.log(message);\r\n    return (\r\n      <>\r\n        <Loading\r\n          size=\"100\"\r\n          strokeWidth=\"4\"\r\n          backgroud=\"white\"\r\n          color={activites[active]?.color}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='step-data'>\r\n        <div className=\"tasks-container\">\r\n          {data.tasks?.length > 0 && (\r\n            <div className=\"tasks-list\">\r\n              {data.tasks?.map((task) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  template={data?._id ? { \"_id\": data?._id, todo: false } : 'new'}\r\n                  setTemplateData={data?._id ? null : setData}\r\n                  {...task}\r\n                />\r\n              ))}\r\n              {isLoading === 'new' && (\r\n                <>\r\n                  {\r\n                    <div className=\"loading-container\">\r\n                      <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                    </div>\r\n                  }\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n          {/* This is for loading while bringing the tasks */}\r\n          {(isLoading === 'tasks' && tasks.tasks?.length > 0) && (\r\n            <div className=\"loading-container\">\r\n              <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n            </div>\r\n          )}\r\n          {!openFormForNew ? (\r\n            <button aria-label=\"add task button\" className=\"add-task-button\" onClick={() => setOpenFormForNew(p => !p)}>\r\n              <AiOutlinePlus size=\"25px\" />\r\n              <p style={{ marginLeft: 10 }}>\r\n                add task\r\n              </p>\r\n            </button>\r\n          ) : (\r\n            <TaskForm\r\n              setOpen={setOpenFormForNew}\r\n              oldData={null}\r\n              template={data?._id ? { \"_id\": data?._id, todo: false } : 'new'}\r\n              setTemplateData={data?._id ? null : setData}\r\n              isLoading={isLoading}\r\n              setIsLoading={setIsLoading}\r\n              setMessage={setMessage}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TasksStep;\r\n"],"names":["Task","lazy","TaskForm","data","setData","message","setMessage","dispatch","useDispatch","useState","openFormForNew","setOpenFormForNew","isLoading","setIsLoading","tasks","useSelector","state","templates","tempTasks","_id","page","setPage","timer","active","activites","useEffect","undefined","length","every","t","getTasksForTemplate","console","log","currentPage","onScroll","scrollTop","document","querySelector","scrollHeight","clientHeight","Number","localStorage","getItem","addEventListener","removeEventListener","total","size","strokeWidth","backgroud","color","className","map","task","template","todo","setTemplateData","setOpen","oldData","onClick","p","style","marginLeft"],"sourceRoot":""}