{"version":3,"file":"static/js/146.12d7922c.chunk.js","mappings":"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","sources":["components/Tasks/Tasks.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from \"react\";\r\n\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getTasks } from \"../../actions/tasks\";\r\n\r\nimport Loading from \"../../utils/Loading\";\r\nimport Message from \"../../utils/Message\";\r\nimport NetworkError from \"../NetworkError/NetworkError\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TaskForm = lazy(() => import(\"./TaskForm/TaskForm\"));\r\nconst Task = lazy(() => import(\"./Task/Task\"));\r\n\r\nconst Tasks = ({ message, setMessage, isLoading, setIsLoading, setActiveTemplate, activeTemplate }) => {\r\n  const [openFormForNew, setOpenFormForNew] = useState(false);\r\n  const tasks = useSelector(state => state.tasks);\r\n  const { active, activites } = useSelector(state => state.timer);\r\n  const [page, setPage] = useState(1);\r\n  const dispatch = useDispatch();\r\n  console.log(tasks);\r\n\r\n  useEffect(() => {\r\n    if (tasks.tasks === undefined && tasks?.total === undefined) {\r\n      dispatch(getTasks(setMessage, 1));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks]);\r\n\r\n  useEffect(() => {\r\n    console.log(page);\r\n    if (page > tasks.currentPage) {\r\n      dispatch(getTasks(setMessage, Number(localStorage.getItem('currentPage')) + 1));\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      let scrollTop = document.querySelector('.tasks-container')?.scrollTop;\r\n      let scrollHeight = document.querySelector('.tasks-list')?.scrollHeight;\r\n      let clientHeight = document.querySelector('.tasks-container')?.clientHeight;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight && Number(localStorage.getItem('total')) > Number(localStorage.getItem('tasksLen'))) {\r\n        setPage(Number(localStorage.getItem('currentPage')) + 1);\r\n      }\r\n    }\r\n\r\n    document.querySelector('.tasks-container')?.addEventListener('scroll', onScroll);\r\n    return () => document.querySelector('.tasks-container')?.removeEventListener('scroll', onScroll);\r\n\r\n    // eslint-disable-next-line\r\n  }, [tasks.tasks, tasks.total])\r\n\r\n  if (tasks.tasks === undefined) {\r\n    console.log(message);\r\n    return (\r\n      <>\r\n        {(!message.message) ?\r\n          (\r\n            <>\r\n              <Loading\r\n                size=\"100\"\r\n                strokeWidth=\"2\"\r\n                backgroud=\"white\"\r\n                color={activites[active]?.color}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              {(message.message && !message.message.includes('Network Error')) ? (\r\n                <Message {...message} setMessage={setMessage} />\r\n              ) : (\r\n                <NetworkError />\r\n              )}\r\n            </>\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tasks.tasks?.length > 0 && (\r\n        <div className=\"tasks-list\">\r\n          {isLoading === 'new' ? (\r\n            <>\r\n              {tasks.tasks?.filter(t => !t.check)?.map((task, index) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  setActiveTemplate={setActiveTemplate}\r\n                  activeTemplate={activeTemplate}\r\n                  {...task}\r\n                />\r\n              ))}\r\n              {\r\n                <div className=\"loading-container\">\r\n                  <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n                </div>\r\n              }\r\n              {tasks.tasks?.filter(t => t.check)?.map((task, index) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  setActiveTemplate={setActiveTemplate}\r\n                  activeTemplate={activeTemplate}\r\n                  {...task}\r\n                />\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {tasks.tasks?.map((task, index) => (\r\n                <Task\r\n                  key={task._id}\r\n                  isLoading={isLoading}\r\n                  setIsLoading={setIsLoading}\r\n                  setMessage={setMessage}\r\n                  setActiveTemplate={setActiveTemplate}\r\n                  activeTemplate={activeTemplate}\r\n                  {...task}\r\n                />\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n      <> {/* This is for loading while bringing the tasks */}\r\n        {(tasks.isLoading && tasks.tasks.length > 0) && (\r\n          <div className=\"loading-container\">\r\n            <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n          </div>\r\n        )}\r\n      </>\r\n      {!openFormForNew && (\r\n        <button aria-label=\"add task button\" className=\"add-task-button\" onClick={() => setOpenFormForNew(p => !p)}>\r\n          <AiOutlinePlus size=\"25px\" />\r\n          <p style={{ marginLeft: 10 }}>\r\n            add task\r\n          </p>\r\n        </button>\r\n      )}\r\n      {openFormForNew && (\r\n        <TaskForm setOpen={setOpenFormForNew} oldData={null} isLoading={isLoading} setIsLoading={setIsLoading} setMessage={setMessage} />\r\n      )}\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Tasks;\r\n"],"names":["TaskForm","lazy","Task","message","setMessage","isLoading","setIsLoading","setActiveTemplate","activeTemplate","useState","openFormForNew","setOpenFormForNew","tasks","useSelector","state","timer","active","activites","page","setPage","dispatch","useDispatch","console","log","useEffect","undefined","total","getTasks","currentPage","Number","localStorage","getItem","onScroll","scrollTop","document","querySelector","scrollHeight","clientHeight","addEventListener","removeEventListener","includes","size","strokeWidth","backgroud","color","length","className","filter","t","check","map","task","index","_id","onClick","p","style","marginLeft","setOpen","oldData"],"sourceRoot":""}