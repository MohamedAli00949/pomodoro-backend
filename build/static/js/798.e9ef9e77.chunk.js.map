{"version":3,"file":"static/js/798.e9ef9e77.chunk.js","mappings":"oMASMA,GAASC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACdC,GAAOD,EAAAA,EAAAA,OAAK,kBAAM,8DAAN,IACZE,GAAQF,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAEbG,GAAWH,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAwEtB,UAtEiB,SAAC,GAAmE,IAAD,EAAhEI,EAAgE,EAAhEA,QAASC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAChE,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAV,IAE/B,OACE,+BACE,SAAC,EAAAG,SAAD,CAAUC,UACR,SAAC,IAAD,CACEC,KAAK,MACLC,YAAY,IACZC,MAAM,QACNC,UAAU,gBALd,UAQE,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,SAAf,WACE,iBAAKC,MAAO,CACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,SACVC,cAAe,OALjB,WAOE,gBAAKN,UAAU,iBAAf,SACIX,GAGA,gBAAKW,UAAU,OAAf,UACE,mBACE,aAAW,4BACXA,UAAU,cACVO,QAAS,kBAAMjB,EAAkB,KAAxB,EACTkB,SAA4B,KAAb,OAALjB,QAAK,IAALA,OAAA,EAAAA,EAAOkB,QAJnB,UAKE,SAAC,MAAD,SARJ,SAAC7B,EAAD,CAAMI,WAAYA,OAatB,eAAIiB,MAAO,CACTS,WAAY,QADd,SAGiB,OAAdrB,QAAc,IAAdA,GAAAA,EAAgBsB,IAAhB,OAAsBtB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAgBuB,KAAO,cAGlD,mBAAQ,aAAW,cAAcZ,UAAU,cAAca,KAAK,SAASN,QAAS,kBAAMpB,GAAY,EAAlB,EAAhF,UACE,SAAC,MAAD,UAGJ,gBAAKa,UAAU,kBAAf,UACE,SAAC,EAAAN,SAAD,CAAUC,UACR,gBAAKK,UAAU,oBAAf,UACE,SAAC,IAAD,CAASJ,KAAK,KAAKC,YAAY,IAAIC,MAAO,OAAQC,UAAU,kBAFhE,SAKGV,GACC,SAACP,EAAD,CAAUgC,aAAczB,EAAgBJ,UAAWA,EAAWC,aAAcA,EAAcH,QAASA,EAASC,WAAYA,KAExH,SAACH,EAAD,CAAOE,QAASA,EAASC,WAAYA,EAAY8B,aAAczB,EAAgBJ,UAAWA,EAAWC,aAAcA,EAAcC,YAAaA,EAAaG,kBAAmBA,EAAmBD,eAAgBA,SAItN,UAAAE,EAAMA,aAAN,eAAakB,QAAS,IACrB,SAAC/B,EAAD,CAAQW,eAAgBA,UAMnC,C","sources":["components/Tasks/TodoList.js"],"sourcesContent":["import React, { lazy, Suspense, useState } from \"react\";\r\n\r\nimport { CgClose } from \"react-icons/cg\";\r\nimport { MdKeyboardArrowLeft } from 'react-icons/md';\r\nimport { useSelector } from \"react-redux\";\r\nimport Loading from \"../../utils/Loading\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Footer = lazy(() => import(\"./TaskFooter/TaskFooter\"));\r\nconst Menu = lazy(() => import(\"./TasksMenu/TasksMenu\"));\r\nconst Tasks = lazy(() => import(\"./Tasks\"));\r\n\r\nconst Template = lazy(() => import(\"./TodoTemplate\"));\r\n\r\nconst TodoList = ({ message, setMessage, isLoading, setIsLoading, setOpenTodo }) => {\r\n  const [activeTemplate, setActiveTemplate] = useState(null);\r\n  const tasks = useSelector(state => state.tasks);\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={\r\n        <Loading\r\n          size=\"200\"\r\n          strokeWidth=\"5\"\r\n          color=\"white\"\r\n          backgroud=\"transparent\"\r\n        />\r\n      }>\r\n        <div className=\"tasks glass-effect zoom-in\">\r\n          <div className=\"header\">\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              flexWrap: 'nowrap',\r\n              flexDirection: 'row',\r\n            }}>\r\n              <div className=\"header-buttons\">\r\n                {!activeTemplate ? (\r\n                  <Menu setMessage={setMessage} />\r\n                ) : (\r\n                  <div className=\"menu\">\r\n                    <button\r\n                      aria-label=\"toggle the task list menu\"\r\n                      className=\"toggle-menu\"\r\n                      onClick={() => setActiveTemplate(null)}\r\n                      disabled={tasks?.length === 0}>\r\n                      <MdKeyboardArrowLeft />\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <h2 style={{\r\n                marginLeft: \"10px\",\r\n              }}>\r\n                {activeTemplate?._id ? activeTemplate?.name : \"Tasks\"}\r\n              </h2>\r\n            </div>\r\n            <button aria-label='close tasks' className=\"close-tasks\" type='button' onClick={() => setOpenTodo(false)}>\r\n              <CgClose />\r\n            </button>\r\n          </div>\r\n          <div className=\"tasks-container\">\r\n            <Suspense fallback={\r\n              <div className=\"loading-container\">\r\n                <Loading size=\"50\" strokeWidth=\"3\" color={\"#fff\"} backgroud=\"transparent\" />\r\n              </div>\r\n            }>\r\n              {activeTemplate ? (\r\n                <Template todoTemplate={activeTemplate} isLoading={isLoading} setIsLoading={setIsLoading} message={message} setMessage={setMessage} />\r\n              ) : (\r\n                <Tasks message={message} setMessage={setMessage} todoTemplate={activeTemplate} isLoading={isLoading} setIsLoading={setIsLoading} setOpenTodo={setOpenTodo} setActiveTemplate={setActiveTemplate} activeTemplate={activeTemplate} />\r\n              )}\r\n            </Suspense>\r\n          </div>\r\n          {tasks.tasks?.length > 0 && (\r\n            <Footer activeTemplate={activeTemplate} />\r\n          )}\r\n        </div>\r\n      </Suspense>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default TodoList;\r\n"],"names":["Footer","lazy","Menu","Tasks","Template","message","setMessage","isLoading","setIsLoading","setOpenTodo","useState","activeTemplate","setActiveTemplate","tasks","useSelector","state","Suspense","fallback","size","strokeWidth","color","backgroud","className","style","display","alignItems","justifyContent","flexWrap","flexDirection","onClick","disabled","length","marginLeft","_id","name","type","todoTemplate"],"sourceRoot":""}