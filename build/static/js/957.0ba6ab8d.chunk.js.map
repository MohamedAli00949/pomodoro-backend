{"version":3,"file":"static/js/957.0ba6ab8d.chunk.js","mappings":"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","sources":["components/Templates/TemplateForm/FormFooter/FormFooter.js","components/Templates/TemplateForm/TemplateForm.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction FormFooter({\r\n  activeStep,\r\n  handleCancelOrPrev,\r\n  handleNextButton,\r\n  disableNextOrSubmit\r\n}) {\r\n  return (\r\n    <div className='form-footer'>\r\n      <button\r\n        aria-label=\"cancel form button\"\r\n        type=\"button\"\r\n        onClick={handleCancelOrPrev}\r\n      >\r\n        {activeStep === 0 ? 'cancel' : 'previous'}\r\n      </button>\r\n      {activeStep === 3 ? (\r\n        <button\r\n          aria-label=\"next/submit form button\"\r\n          type=\"submit\"\r\n          className=\"save\"\r\n          disabled={disableNextOrSubmit()}\r\n        >\r\n          save\r\n        </button>\r\n      ) : (\r\n        <button\r\n          aria-label=\"next/submit form button\"\r\n          type=\"button\"\r\n          onClick={handleNextButton}\r\n          className=\"save\"\r\n          disabled={disableNextOrSubmit()}\r\n        >\r\n          next\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormFooter;\r\n","import React, { useState, lazy, Suspense } from 'react';\r\n\r\nimport { CgClose, CgTimelapse } from 'react-icons/cg';\r\nimport { AiOutlineInfo, AiFillSound } from 'react-icons/ai';\r\n\r\nimport './style.css'\r\n\r\nimport Message from '../../../utils/Message';\r\nimport NetworkError from '../../NetworkError/NetworkError';\r\nimport FormFooter from './FormFooter/FormFooter';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addTemplate, modifyTemplate } from '../../../actions/templates';\r\nimport Loading from '../../../utils/Loading';\r\n\r\nconst TodoList = lazy(() => import('../../../icons/list/TodoList'));\r\nconst InfoStep = lazy(() => import('./InfoStep/InfoStep'));\r\nconst TasksStep = lazy(() => import('./TasksStep/TasksStep'));\r\nconst TimerStep = lazy(() => import('./TimerStep/TimerStep'));\r\nconst SoundStep = lazy(() => import('./SoundStep/SoundStep'));\r\nconst CompletedStatus = lazy(() => import('./CompletedStatus/CompletedStatus'));\r\n\r\nconst initialData = {\r\n  name: \"\",\r\n  desc: \"\",\r\n  tasks: [],\r\n  time: {\r\n    \"PERIOD\": 1500,\r\n    \"SHORT\": 300,\r\n    \"LONG\": 900,\r\n  },\r\n  autoBreaks: false,\r\n  autoPomodors: false,\r\n  autoStartNextTask: false,\r\n  longInterval: 4,\r\n  alarmType: {\r\n    \"name\": \"alarm 1\",\r\n    \"src\": \"sounds/alarm/1.mp3\"\r\n  },\r\n  alarmVolume: 50,\r\n  alarmRepet: 0,\r\n  tickingType: {\r\n    \"name\": \"tricking 1\",\r\n    \"src\": \"sounds/tricking/1.mp3\"\r\n  },\r\n  tickingVolume: 50,\r\n};\r\n\r\nfunction TemplateForm({\r\n  oldData,\r\n  isLoading,\r\n  setIsLoading,\r\n  setOpen\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const { active, activites } = useSelector(state => state.timer);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [data, setData] = useState(oldData === null ? initialData : oldData);\r\n  const [message, setMessage] = useState({ message: '', type: '' })\r\n\r\n  const steps = [\r\n    {\r\n      text: 'info',\r\n      Icon: () => <AiOutlineInfo />,\r\n    },\r\n    {\r\n      text: 'todo',\r\n      Icon: () => <TodoList />,\r\n    },\r\n    {\r\n      text: 'timer',\r\n      Icon: () => <CgTimelapse />,\r\n    },\r\n    {\r\n      text: 'sound',\r\n      Icon: () => <AiFillSound />,\r\n    },\r\n  ];\r\n\r\n  const handleCancelOrPrev = () => {\r\n    if (activeStep === 0) {\r\n      setOpen(false);\r\n    } else {\r\n      setActiveStep(as => as - 1);\r\n    }\r\n  }\r\n\r\n  const handleNextButton = (e) => {\r\n    console.log('next')\r\n    if (activeStep < 3) {\r\n      setActiveStep(as => ++as);\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setData({ ...data, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!data.name) {\r\n      setMessage(\"Empty name\");\r\n    } else if (!data.desc) {\r\n      setMessage(\"Empty desc\");\r\n    } else if (data.tasks.length === 0) {\r\n      setMessage(\"Empty todo list\");\r\n    } else if (Object.values(data.time).includes(0)) {\r\n      setMessage({ message: \"Please enter valid time data\", type: 'error' });\r\n    } else if (!data.longInterval) {\r\n      setMessage({ message: \"Please enter long break interval\", type: 'error' });\r\n    } else {\r\n      if (!oldData) {\r\n        dispatch(addTemplate(data, setIsLoading, setActiveStep, setMessage));\r\n      } else {\r\n        if (oldData !== data) {\r\n          dispatch(modifyTemplate(data._id, {\r\n            ...data,\r\n            tasks: data.tasks.map(t => t._id)\r\n          },\r\n            setIsLoading,\r\n            setActiveStep,\r\n            setMessage\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const disableNextOrSubmit = () => {\r\n    switch (activeStep) {\r\n      case 0:\r\n        return !data.name || !data.desc;\r\n      case 1:\r\n        return data.tasks?.length === 0;\r\n      case 2:\r\n        return Object.values(data.time).includes(0);\r\n      case 3:\r\n        return data.longInterval === 0;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {(message.message && !message.message.includes('Network Error')) ? (\r\n        <Message {...message} setMessage={setMessage} />\r\n      ) : message.message.includes('Network Error') && (\r\n        <NetworkError />\r\n      )}\r\n      <div className=\"glass-container\">\r\n        <div className=\"glass-effect temp-form\">\r\n          <div className='form-header'>\r\n            <h2>{oldData ? 'edit template' : 'new template'}</h2>\r\n            <button\r\n              aria-label='close template form'\r\n              className=\"close-temp-form\"\r\n              type='button'\r\n              onClick={() => setOpen(false)}\r\n            >\r\n              <CgClose />\r\n            </button>\r\n          </div>\r\n          <div className='steps'>\r\n            {steps.map((step, index) => (\r\n              <div key={index} className={`step ${index === activeStep ? 'active' : index < activeStep && 'completed'}`}>\r\n                <div className='icon'>{<step.Icon />}</div>\r\n                <p className='text'>{step.text}</p>\r\n                {index !== 3 && (\r\n                  <div className=\"line\"></div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {(activeStep === 3) ? (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className='form-middle'>\r\n                <Suspense fallback={\r\n                  <Loading\r\n                    size=\"100\"\r\n                    strokeWidth=\"4\"\r\n                    backgroud=\"#e7e7e7\"\r\n                    color={activites[active]?.color}\r\n                  />\r\n                }>\r\n                  <SoundStep\r\n                    data={data}\r\n                    setData={setData}\r\n                    handleChange={handleChange}\r\n                  />\r\n                  <FormFooter\r\n                    disableNextOrSubmit={disableNextOrSubmit}\r\n                    handleCancelOrPrev={handleCancelOrPrev}\r\n                    handleNextButton={handleNextButton}\r\n                    activeStep={activeStep}\r\n                  />\r\n                </Suspense>\r\n              </div>\r\n            </form>\r\n          ) : activeStep < 3 ? (\r\n            <div className='form-middle'>\r\n              <Suspense fallback={\r\n                <Loading\r\n                  size=\"100\"\r\n                  strokeWidth=\"4\"\r\n                  backgroud=\"#e7e7e7\"\r\n                  color={activites[active]?.color}\r\n                />\r\n              }>\r\n                {activeStep === 0 ? (\r\n                  <InfoStep\r\n                    data={data}\r\n                    setData={setData}\r\n                    handleChange={handleChange}\r\n                  />\r\n                ) :\r\n                  activeStep === 1 ? (\r\n                    <TasksStep\r\n                      data={data}\r\n                      setData={setData}\r\n                      handleChange={handleChange}\r\n                      message={message}\r\n                      setMessage={setMessage}\r\n                    />\r\n                  ) : (\r\n                    <TimerStep\r\n                      data={data}\r\n                      setData={setData}\r\n                      handleChange={handleChange}\r\n                    />\r\n                  )\r\n                }\r\n              </Suspense>\r\n              <FormFooter\r\n                disableNextOrSubmit={disableNextOrSubmit}\r\n                handleCancelOrPrev={handleCancelOrPrev}\r\n                handleNextButton={handleNextButton}\r\n                activeStep={activeStep}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Suspense fallback={\r\n                <Loading\r\n                  size=\"100\"\r\n                  strokeWidth=\"4\"\r\n                  backgroud=\"#e7e7e7\"\r\n                  color={activites[active]?.color}\r\n                />\r\n              }>\r\n                <CompletedStatus\r\n                  data={data}\r\n                  setIsLoading={setIsLoading}\r\n                  isLoading={isLoading}\r\n                  setOpen={setOpen}\r\n                />\r\n              </Suspense>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TemplateForm;\r\n"],"names":["activeStep","handleCancelOrPrev","handleNextButton","disableNextOrSubmit","className","type","onClick","disabled","TodoList","lazy","InfoStep","TasksStep","TimerStep","SoundStep","CompletedStatus","initialData","name","desc","tasks","time","autoBreaks","autoPomodors","autoStartNextTask","longInterval","alarmType","alarmVolume","alarmRepet","tickingType","tickingVolume","oldData","isLoading","setIsLoading","setOpen","dispatch","useDispatch","useSelector","state","timer","active","activites","useState","setActiveStep","data","setData","message","setMessage","steps","text","Icon","as","e","console","log","handleChange","target","value","length","Object","values","includes","Message","NetworkError","map","step","index","onSubmit","preventDefault","modifyTemplate","_id","t","addTemplate","Suspense","fallback","Loading","size","strokeWidth","backgroud","color"],"sourceRoot":""}